'''
Created on Apr 11, 2014

@author: oliwa
'''

import argparse
import sys
from scriptutils import getFullPathOfURI, makeStringEndWith, makeStringNotEndWith
import glob as glob
import os as os
import ResultsCombiner


def main():
    """ Meta script to call all helper scripts to create plots from direct results. """  
    parser = argparse.ArgumentParser(description='Meta script to call all helper scripts to create plots from direct results.',
    epilog="Result: Analysis of results and plots. Example: ")
    parser.add_argument('resultsPath', help='Unique prefix string of the folders whose content should be copied into a new folder')
    parser.add_argument('--prefix', help='String common among folders after unique prefix, which will not be part of the name anymore, default is \"NumberOf\"')
    parser.add_argument('resultsPathRunPostAnalyzer', help='Absolute folderpath with results per protein')
    parser.add_argument('benchmarkSubsetPathRunPostAnalyzer', help='Absolute folderpath with benchmark difficulty categorizations in <benchmarkSubsetPath>/all.txt <benchmarkSubsetPath>/difficult.txt <benchmarkSubsetPath>/medium.txt <benchmarkSubsetPath>/rigid.txt')
    parser.add_argument('--postAnalysisProgramPathRunPostAnalyzer', help='Path to the PostAnalysis program, default is \"/home/oliwa/workspace/TNMA1/src/PostAnalysis.py\"')    
    parser.add_argument('resultsPathMakePlotFile', help='Path to the individual (per protein) results, to be plotted')
    parser.add_argument('optionalResultsPathMakePlotFile', nargs='?', help='Optional path to the individual (per protein) canonical results, which can be used as comparison in the plots')
    parser.add_argument('--resultsDescriptorMakePlotFile', help='A string describing the approach that created the results, default is \"submatrix\"')
    parser.add_argument('--optionalResultsDescriptorMakePlotFile', help='A string describing the approach that created the optional results, default is \"canonical\"')    
    parser.add_argument('plotFileAnalysisPlotter', help='textfile specifying the results to be plotted, can be generated by MakePlotFile.py')
    parser.add_argument('outputPathAnalysisPlotter', help='output path for the plots')
    parser.add_argument('--plotOnlyReductionAnalysisPlotter', action="store_true", help='If set, only RMSD reduction and associated plots are made, not measures plots/barplots (overlap, collectivity etc.)')    
    
    if len(sys.argv)==1:
        parser.print_help()
        sys.exit(1)
    args = parser.parse_args()

    # resultsCombiner
    ResultsCombiner.main(args)

if __name__ == '__main__':
    main()